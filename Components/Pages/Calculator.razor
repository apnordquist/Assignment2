@page "/calculator"
@using hybridapp.Data
@inject IJSRuntime JSRuntime

<h1>BLAZOR APP</h1>

<div>
    <h3>Calculator</h3>

    <!-- First Number Input -->
    <div class="row">
        <div class="col-md-3">
            <label style="font-weight: bold;">Enter First Number</label>
        </div>
        <div class="col-md-4">
            <input placeholder="Enter First Number" @bind="@firstNumber" class="form-control" />
        </div>
    </div>
    <br />

    <!-- Second Number Input -->
    <div class="row">
        <div class="col-md-3">
            <label style="font-weight: bold;">Enter Second Number</label>
        </div>
        <div class="col-md-4">
            <input placeholder="Enter Second Number" @bind="@secondNumber" class="form-control" />
        </div>
    </div>
    <br />

    <!-- Result Display -->
    <div class="row">
        <div class="col-md-3">
            <label style="font-weight: bold;">Result</label>
        </div>
        <div class="col-md-4">
            <input readonly @bind="@result" class="form-control" />
        </div>
    </div>
    <br />

    <!-- Calculator Buttons -->
    <div class="row">

        <!-- Add Button -->
        <div class="col-md-2">
            <button @onclick="Add" class="btn btn-outline-success">Add (+)</button>
        </div>

        <!-- Subtract Button -->
        <div class="col-md-2">
            <button @onclick="Subtract" class="btn btn-outline-primary">Subtract (−)</button>
        </div>

        <!-- Multiply Button -->
        <div class="col-md-2">
            <button @onclick="Multiply" class="btn btn-outline-info">Multiply (X)</button>
        </div>

        <!-- Divide Button -->
        <div class="col-md-2">
            <button @onclick="Divide" class="btn btn-outline-danger">Divide (/)</button>
        </div>

        <!-- Clear Button -->
        <div class="col-md-2">
            <button @onclick="Clear" class="btn btn-outline-secondary">Clear All</button>
        </div>
    </div>
</div>

@code {
    private string firstNumber = "";
    private string secondNumber = "";
    private string result = "";

    // function to add numbers
    private void Add()
    {
        try
        {
            result = (Convert.ToDouble(firstNumber) + Convert.ToDouble(secondNumber)).ToString();
            ClearInput();
        }
        catch (FormatException e)
        {
            string error = "Please enter valid numbers";
            ErrorMessage(error);
        }
    }

    // function to subtract numbers
    private void Subtract()
    {
        try
        {
            result = (Convert.ToDouble(firstNumber) - Convert.ToDouble(secondNumber)).ToString();
            ClearInput();
        }
        catch (FormatException e)
        {
            string error = "Please enter valid numbers";
            ErrorMessage(error);
        }
    }

    // function to multiply numbers
    private void Multiply()
    {
        try
        {
            result = (Convert.ToDouble(firstNumber) * Convert.ToDouble(secondNumber)).ToString();
            ClearInput();
        }
        catch (FormatException e)
        {
            string error = "Please enter valid numbers";
            ErrorMessage(error);
        }
    }

    // function to divide numbers
    private void Divide()
    {
        try
        {
            if (Convert.ToDouble(secondNumber) != 0)
            {
                result = (Convert.ToDouble(firstNumber) / Convert.ToDouble(secondNumber)).ToString();
                ClearInput();
            }
            else
            {
                throw new DivideByZeroException("Cannot divide by zero");
            }
        }
        catch (FormatException f)
        {
            string error = "Please enter valid numbers";
            ErrorMessage(error);
        }
        catch (DivideByZeroException z)//div 0 exception
        {
            ErrorMessage(z.Message);
        }
    }

    // Function to input fields
    private void ClearInput()
    {
        firstNumber = "";
        secondNumber = "";
    }

    // Function to clear all fields
    private void Clear()
    {
        firstNumber = "";
        secondNumber = "";
        result = "";
    }

    // Function to push error message
    private async void ErrorMessage(string errorMessage)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Error: {errorMessage}."); //create dialog box
    }
}
