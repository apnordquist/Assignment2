@page "/todo"
@using hybridapp.Data
@inject IJSRuntime JSRuntime

<h1 class="mt-6">Todo List</h1>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <div class="input-group mb-3">
                <!-- Input field for adding new todo items -->
                <input type="text" class="form-control" @bind="newTodoText" placeholder="Enter a new Todo to your list:" />
                <!-- Button to add new todo items -->
                <button class="btn btn-primary" type="button" @onclick="AddTodo">Add</button>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <h2>Todo</h2>
            <!-- Display todo items -->
            @foreach (var todo in todoItems)
            {
                <div class="form-check">
                    <!-- Checkbox for marking todo items as done -->
                    <input class="form-check-input" type="checkbox" @onchange="() => MoveToDone(todo)" />
                    <!-- Label for displaying todo item text -->
                    <label class="form-check-label">@todo.Text</label>
                    <!-- Label for displaying todo item date -->
                    <label class="form-check-label">added: @todo.Date</label>
                    <!-- Button for deleting todo items -->
                    <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteItem(todo, todoItems)">Delete</button>
                </div>
            }
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6">
            <h2>Done</h2>
            <!-- Display done items -->
            @foreach (var doneItem in doneItems)
            {
                <div class="form-check">
                    <!-- Label for displaying done item text -->
                    <label class="form-check-label">@doneItem.Text</label>
                    <!-- Button for deleting done items -->
                    <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteItem(doneItem, doneItems)">Delete</button>
                </div>
            }
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6">
            <h2>Deleted</h2>
            <!-- Display deleted items -->
            @foreach (var deleteItem in deleteItems)
            {
                <div class="form-check">
                    <!-- Label for displaying done item text -->
                    <label class="form-check-label">@deleteItem.Text</label>
                </div>
            }
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6">
            <!-- Button for clear deleted items -->
            <button class="btn btn-danger btn-sm ms-2" @onclick="() => deleteItems.Clear()">Clear Deleted</button>
        </div>
    </div>
</div>


@code {
    // String variable to store the text of the new todo item
    private string newTodoText = "";
    // List to store todo items
    private List<TodoItem> todoItems = new List<TodoItem>();
    // List to store done items
    private List<TodoItem> doneItems = new List<TodoItem>();
    //List to store deleted items
    private List<TodoItem> deleteItems = new List<TodoItem>();
    //string to contain error massage
    private string errorMessage = "Item added";
    //private bool errorFound = false;

    //Check for special characters
    private bool HasSpecialChars(string String)
    {
        char[] SpecialChars = { '!', '@', '#', '$', '%', '^', '&', '*'}; //list of unexpected char
        return SpecialChars.Any(ch => String.Contains(ch));
    }
    // Function to add new todo items
    private async void AddTodo()
    {
        // Check if the input field is not empty
        try
        {
            if (!string.IsNullOrWhiteSpace(newTodoText))
            {
                if (HasSpecialChars(newTodoText) == false)
                {
                    // Create a new todo item with the input text and add it to the todoItems list
                    todoItems.Add(new TodoItem { Text = newTodoText, Date = DateTime.Now }); //add get current date
                    newTodoText = ""; // Clear the input field after adding the todo item
                }
                else
                {
                    throw new SpecialCharException("Items cannot contain special characters (@ # $ %)");
                }
            }
        }
        catch (SpecialCharException e) //catch the exception
        {
            errorMessage = e.Message;
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {errorMessage}."); //create dialog box
        }
    }

    // Function to move todo item to the done section
    private void MoveToDone(TodoItem todo)
    {
        // Check if the todo item is checked
        if (todo.IsChecked)
        {
            // Remove the todo item from the todoItems list
            todoItems.Remove(todo);
            // Add the todo item to the doneItems list
            doneItems.Add(todo);
        }
    }

    // Function to delete todo or done item
    private void DeleteItem(TodoItem item, List<TodoItem> itemList)
    {
        // Check if the todo item is checked
        if (item.IsChecked)
        {
            // Remove the todo item from the todoItems list
            itemList.Remove(item);
            // Add the todo item to the doneItems list
            deleteItems.Add(item);
        }
    }
}
